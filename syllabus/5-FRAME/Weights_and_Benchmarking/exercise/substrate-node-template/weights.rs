
//! Autogenerated weights for `pallet_template`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-12, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Shawns-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/node-template
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-template
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_template`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_template::WeightInfo for WeightInfo<T> {
	fn add() -> Weight {
		// Minimum execution time: 0 nanoseconds.
		Weight::from_ref_time(0)
	}
	fn checked_add() -> Weight {
		// Minimum execution time: 319_000 nanoseconds.
		Weight::from_ref_time(323_000_000)
	}
	// Storage: TemplateModule MyMap (r:0 w:1)
	/// The range of component `i` is `[1, 100]`.
	fn multi_write(i: u32, ) -> Weight {
		// Minimum execution time: 2_000 nanoseconds.
		Weight::from_ref_time(2_215_550)
			// Standard Error: 1_369
			.saturating_add(Weight::from_ref_time(1_151_668).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TemplateModule MyMap (r:0 w:1)
	/// The range of component `i` is `[1, 100]`.
	fn multi_map(i: u32, ) -> Weight {
		// Minimum execution time: 1_000 nanoseconds.
		Weight::from_ref_time(865_711)
			// Standard Error: 1_066
			.saturating_add(Weight::from_ref_time(1_218_678).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
	}
	// Storage: System Account (r:1 w:1)
	fn transfer() -> Weight {
		// Minimum execution time: 37_000 nanoseconds.
		Weight::from_ref_time(38_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn branch_true() -> Weight {
		// Minimum execution time: 439_000 nanoseconds.
		Weight::from_ref_time(449_000_000)
	}
	// Storage: TemplateModule MyValue (r:0 w:1)
	fn branch_false() -> Weight {
		// Minimum execution time: 4_000 nanoseconds.
		Weight::from_ref_time(5_000_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
