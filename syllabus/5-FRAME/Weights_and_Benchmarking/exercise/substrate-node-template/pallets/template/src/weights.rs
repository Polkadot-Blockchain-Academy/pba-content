
//! Autogenerated weights for pallet_template
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-19, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Shawns-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/node-template
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-template
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/template/src/weights.rs
// --template=frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_template.
pub trait WeightInfo {
	fn add() -> Weight;
	fn checked_add() -> Weight;
	fn multi_write(i: u32, ) -> Weight;
	fn multi_map(i: u32, ) -> Weight;
	fn transfer_all() -> Weight;
	fn branch_true() -> Weight;
	fn branch_false() -> Weight;
	fn register_voter(v: u32, ) -> Weight;
	fn make_vote(s: u32, ) -> Weight;
	fn close_vote(s: u32, ) -> Weight;
}

/// Weights for pallet_template using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn add() -> Weight {
		// Minimum execution time: 318_000 nanoseconds.
		Weight::from_ref_time(320_000_000)
	}
	fn checked_add() -> Weight {
		// Minimum execution time: 316_000 nanoseconds.
		Weight::from_ref_time(319_000_000)
	}
	// Storage: TemplateModule MyMap (r:0 w:1)
	/// The range of component `i` is `[1, 100]`.
	fn multi_write(i: u32, ) -> Weight {
		// Minimum execution time: 2_000 nanoseconds.
		Weight::from_ref_time(3_116_849)
			// Standard Error: 1_375
			.saturating_add(Weight::from_ref_time(1_135_368).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TemplateModule MyMap (r:0 w:1)
	/// The range of component `i` is `[1, 100]`.
	fn multi_map(i: u32, ) -> Weight {
		// Minimum execution time: 1_000 nanoseconds.
		Weight::from_ref_time(1_102_200)
			// Standard Error: 1_060
			.saturating_add(Weight::from_ref_time(1_185_001).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
	}
	// Storage: System Account (r:1 w:1)
	fn transfer_all() -> Weight {
		// Minimum execution time: 42_000 nanoseconds.
		Weight::from_ref_time(43_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn branch_true() -> Weight {
		// Minimum execution time: 443_000 nanoseconds.
		Weight::from_ref_time(453_000_000)
	}
	// Storage: TemplateModule MyValue (r:0 w:1)
	fn branch_false() -> Weight {
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(5_000_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TemplateModule Voters (r:1 w:1)
	/// The range of component `v` is `[0, 249]`.
	fn register_voter(v: u32, ) -> Weight {
		// Minimum execution time: 7_000 nanoseconds.
		Weight::from_ref_time(8_932_233)
			// Standard Error: 246
			.saturating_add(Weight::from_ref_time(21_091).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TemplateModule Voters (r:1 w:0)
	// Storage: TemplateModule Votes (r:1 w:1)
	/// The range of component `s` is `[0, 249]`.
	fn make_vote(s: u32, ) -> Weight {
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_ref_time(19_814_051)
			// Standard Error: 386
			.saturating_add(Weight::from_ref_time(33_445).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TemplateModule Voters (r:1 w:0)
	// Storage: TemplateModule Votes (r:1 w:1)
	/// The range of component `s` is `[1, 250]`.
	fn close_vote(s: u32, ) -> Weight {
		// Minimum execution time: 18_000 nanoseconds.
		Weight::from_ref_time(19_320_020)
			// Standard Error: 286
			.saturating_add(Weight::from_ref_time(19_404).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn add() -> Weight {
		// Minimum execution time: 318_000 nanoseconds.
		Weight::from_ref_time(320_000_000)
	}
	fn checked_add() -> Weight {
		// Minimum execution time: 316_000 nanoseconds.
		Weight::from_ref_time(319_000_000)
	}
	// Storage: TemplateModule MyMap (r:0 w:1)
	/// The range of component `i` is `[1, 100]`.
	fn multi_write(i: u32, ) -> Weight {
		// Minimum execution time: 2_000 nanoseconds.
		Weight::from_ref_time(3_116_849)
			// Standard Error: 1_375
			.saturating_add(Weight::from_ref_time(1_135_368).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TemplateModule MyMap (r:0 w:1)
	/// The range of component `i` is `[1, 100]`.
	fn multi_map(i: u32, ) -> Weight {
		// Minimum execution time: 1_000 nanoseconds.
		Weight::from_ref_time(1_102_200)
			// Standard Error: 1_060
			.saturating_add(Weight::from_ref_time(1_185_001).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(i.into())))
	}
	// Storage: System Account (r:1 w:1)
	fn transfer_all() -> Weight {
		// Minimum execution time: 42_000 nanoseconds.
		Weight::from_ref_time(43_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn branch_true() -> Weight {
		// Minimum execution time: 443_000 nanoseconds.
		Weight::from_ref_time(453_000_000)
	}
	// Storage: TemplateModule MyValue (r:0 w:1)
	fn branch_false() -> Weight {
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(5_000_000)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TemplateModule Voters (r:1 w:1)
	/// The range of component `v` is `[0, 249]`.
	fn register_voter(v: u32, ) -> Weight {
		// Minimum execution time: 7_000 nanoseconds.
		Weight::from_ref_time(8_932_233)
			// Standard Error: 246
			.saturating_add(Weight::from_ref_time(21_091).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TemplateModule Voters (r:1 w:0)
	// Storage: TemplateModule Votes (r:1 w:1)
	/// The range of component `s` is `[0, 249]`.
	fn make_vote(s: u32, ) -> Weight {
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_ref_time(19_814_051)
			// Standard Error: 386
			.saturating_add(Weight::from_ref_time(33_445).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TemplateModule Voters (r:1 w:0)
	// Storage: TemplateModule Votes (r:1 w:1)
	/// The range of component `s` is `[1, 250]`.
	fn close_vote(s: u32, ) -> Weight {
		// Minimum execution time: 18_000 nanoseconds.
		Weight::from_ref_time(19_320_020)
			// Standard Error: 286
			.saturating_add(Weight::from_ref_time(19_404).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
