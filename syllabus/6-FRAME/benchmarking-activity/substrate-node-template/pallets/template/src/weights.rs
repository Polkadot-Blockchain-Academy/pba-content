
//! Autogenerated weights for `pallet_template`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-30, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Shawns-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// target/release/node-template
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-template
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/template/src/weights.rs
// --template=frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_template`.
pub trait WeightInfo {
	fn hashing(i: u32, ) -> Weight;
	fn counter(i: u32, ) -> Weight;
	fn claimer(i: u32, ) -> Weight;
	fn transfer_all() -> Weight;
	fn branch_true() -> Weight;
	fn branch_false() -> Weight;
	fn register_voter(v: u32, ) -> Weight;
	fn make_vote(s: u32, ) -> Weight;
	fn close_vote(s: u32, ) -> Weight;
}

/// Weights for `pallet_template` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// The range of component `i` is `[0, 1000]`.
	fn hashing(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(689_222, 0)
			// Standard Error: 131
			.saturating_add(Weight::from_parts(282_080, 0).saturating_mul(i.into()))
	}
	/// Storage: `TemplateModule::MyValue` (r:0 w:1)
	/// Proof: `TemplateModule::MyValue` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// The range of component `i` is `[0, 255]`.
	fn counter(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(3_441_489, 0)
			// Standard Error: 757
			.saturating_add(Weight::from_parts(705_609, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `TemplateModule::MyMap` (r:0 w:256)
	/// Proof: `TemplateModule::MyMap` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// The range of component `i` is `[0, 255]`.
	fn claimer(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(2_266_430, 0)
			// Standard Error: 1_752
			.saturating_add(Weight::from_parts(1_617_474, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn transfer_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3593`
		// Minimum execution time: 62_000_000 picoseconds.
		Weight::from_parts(63_000_000, 3593)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn branch_true() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 553_000_000 picoseconds.
		Weight::from_parts(556_000_000, 0)
	}
	/// Storage: `TemplateModule::MyValue` (r:0 w:1)
	/// Proof: `TemplateModule::MyValue` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn branch_false() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(3_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `TemplateModule::Voters` (r:1 w:1)
	/// Proof: `TemplateModule::Voters` (`max_values`: Some(1), `max_size`: Some(8002), added: 8497, mode: `MaxEncodedLen`)
	/// The range of component `v` is `[0, 249]`.
	fn register_voter(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `34 + v * (32 ±0)`
		//  Estimated: `9487`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(7_066_075, 9487)
			// Standard Error: 286
			.saturating_add(Weight::from_parts(14_787, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `TemplateModule::Voters` (r:1 w:0)
	/// Proof: `TemplateModule::Voters` (`max_values`: Some(1), `max_size`: Some(8002), added: 8497, mode: `MaxEncodedLen`)
	/// Storage: `TemplateModule::Votes` (r:1 w:1)
	/// Proof: `TemplateModule::Votes` (`max_values`: Some(1), `max_size`: Some(8252), added: 8747, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 249]`.
	fn make_vote(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `91 + s * (65 ±0)`
		//  Estimated: `9737`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(15_130_230, 9737)
			// Standard Error: 313
			.saturating_add(Weight::from_parts(26_574, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `TemplateModule::Voters` (r:1 w:0)
	/// Proof: `TemplateModule::Voters` (`max_values`: Some(1), `max_size`: Some(8002), added: 8497, mode: `MaxEncodedLen`)
	/// Storage: `TemplateModule::Votes` (r:1 w:1)
	/// Proof: `TemplateModule::Votes` (`max_values`: Some(1), `max_size`: Some(8252), added: 8747, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[1, 250]`.
	fn close_vote(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `59 + s * (65 ±0)`
		//  Estimated: `9737`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(14_429_483, 9737)
			// Standard Error: 291
			.saturating_add(Weight::from_parts(23_728, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// The range of component `i` is `[0, 1000]`.
	fn hashing(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(689_222, 0)
			// Standard Error: 131
			.saturating_add(Weight::from_parts(282_080, 0).saturating_mul(i.into()))
	}
	/// Storage: `TemplateModule::MyValue` (r:0 w:1)
	/// Proof: `TemplateModule::MyValue` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// The range of component `i` is `[0, 255]`.
	fn counter(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(3_441_489, 0)
			// Standard Error: 757
			.saturating_add(Weight::from_parts(705_609, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `TemplateModule::MyMap` (r:0 w:256)
	/// Proof: `TemplateModule::MyMap` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// The range of component `i` is `[0, 255]`.
	fn claimer(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(2_266_430, 0)
			// Standard Error: 1_752
			.saturating_add(Weight::from_parts(1_617_474, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(i.into())))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn transfer_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3593`
		// Minimum execution time: 62_000_000 picoseconds.
		Weight::from_parts(63_000_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn branch_true() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 553_000_000 picoseconds.
		Weight::from_parts(556_000_000, 0)
	}
	/// Storage: `TemplateModule::MyValue` (r:0 w:1)
	/// Proof: `TemplateModule::MyValue` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn branch_false() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(3_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `TemplateModule::Voters` (r:1 w:1)
	/// Proof: `TemplateModule::Voters` (`max_values`: Some(1), `max_size`: Some(8002), added: 8497, mode: `MaxEncodedLen`)
	/// The range of component `v` is `[0, 249]`.
	fn register_voter(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `34 + v * (32 ±0)`
		//  Estimated: `9487`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(7_066_075, 9487)
			// Standard Error: 286
			.saturating_add(Weight::from_parts(14_787, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `TemplateModule::Voters` (r:1 w:0)
	/// Proof: `TemplateModule::Voters` (`max_values`: Some(1), `max_size`: Some(8002), added: 8497, mode: `MaxEncodedLen`)
	/// Storage: `TemplateModule::Votes` (r:1 w:1)
	/// Proof: `TemplateModule::Votes` (`max_values`: Some(1), `max_size`: Some(8252), added: 8747, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 249]`.
	fn make_vote(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `91 + s * (65 ±0)`
		//  Estimated: `9737`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(15_130_230, 9737)
			// Standard Error: 313
			.saturating_add(Weight::from_parts(26_574, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `TemplateModule::Voters` (r:1 w:0)
	/// Proof: `TemplateModule::Voters` (`max_values`: Some(1), `max_size`: Some(8002), added: 8497, mode: `MaxEncodedLen`)
	/// Storage: `TemplateModule::Votes` (r:1 w:1)
	/// Proof: `TemplateModule::Votes` (`max_values`: Some(1), `max_size`: Some(8252), added: 8747, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[1, 250]`.
	fn close_vote(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `59 + s * (65 ±0)`
		//  Estimated: `9737`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(14_429_483, 9737)
			// Standard Error: 291
			.saturating_add(Weight::from_parts(23_728, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
